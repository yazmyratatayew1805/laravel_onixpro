{"version":3,"file":"/vendor/Onix/js/scriptEditor.js","mappings":"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","sources":["webpack:///./resources/vendor/Onix/js/scriptEditor/src/consts.js","webpack:///./resources/vendor/Onix/js/scriptEditor/src/commands.js","webpack:///./resources/vendor/Onix/js/scriptEditor/src/scriptEditor.js"],"sourcesContent":["export const cmdId = 'edit-script';","import {\r\n    cmdId\r\n} from './consts';\r\n\r\nexport default (editor, opts = {}) => {\r\n    const cm = editor.Commands;\r\n    const md = editor.Modal;\r\n    const domc = editor.Components;\r\n    const {\r\n        modalTitle,\r\n        codeViewOptions,\r\n        commandAttachScript,\r\n        toolbarIcon,\r\n        onRun,\r\n        onError,\r\n        starter\r\n    } = opts;\r\n    let scriptTypesSupport = opts.scriptTypesSupport;\r\n\r\n    let content = null;\r\n\r\n    const appendToContent = (target, content) => {\r\n        if (content instanceof HTMLElement) {\r\n            target.appendChild(content);\r\n        } else if (content) {\r\n            target.insertAdjacentHTML('beforeend', content);\r\n        }\r\n    };\r\n\r\n    if (editor.$.isString(scriptTypesSupport)) {\r\n        scriptTypesSupport = scriptTypesSupport.split(',');\r\n    }\r\n\r\n    if (editor.$.isArray(scriptTypesSupport)) {\r\n        scriptTypesSupport = scriptTypesSupport.includes('*') ?\r\n            domc.getTypes().map(c => c.id) : scriptTypesSupport;\r\n    }\r\n\r\n    // Add icons to specified component types\r\n    scriptTypesSupport && scriptTypesSupport.forEach(type => {\r\n        const typeOpt = domc.getType(type).model;\r\n        domc.addType(type, {\r\n            model: {\r\n                initToolbar() {\r\n                    typeOpt.prototype.initToolbar.apply(this, arguments);\r\n                    const tb = this.get('toolbar');\r\n                    const tbExists = tb.some(item => item.command === cmdId);\r\n\r\n                    if (!tbExists) {\r\n                        tb.unshift({\r\n                            command: cmdId,\r\n                            label: toolbarIcon,\r\n                            ...opts.toolbarBtnCustomScript\r\n                        });\r\n                        this.set('toolbar', tb);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    })\r\n\r\n    // Add the script command\r\n    cm.add(cmdId, {\r\n        run(editor, sender, opts = {}) {\r\n            this.editor = editor;\r\n            this.options = opts;\r\n            this.target = opts.target || editor.getSelected();\r\n            const target = this.target;\r\n\r\n            if (target) this.showCustomCode(target);\r\n        },\r\n\r\n        stop(editor) {\r\n            md.close();\r\n        },\r\n\r\n        /**\r\n         * Method which tells how to show the custom code\r\n         * @param  {Component} target\r\n         */\r\n        showCustomCode(target) {\r\n            const { editor, options } = this;\r\n            const title = options.title || modalTitle;\r\n            if (!content) content = this.getContent();\r\n            let code = target.getScriptString() || starter;\r\n            md.open({\r\n                title,\r\n                content\r\n            }).getModel().once('change:open', () => editor.stopCommand(this.id));\r\n            this.getCodeViewer().setContent(code);\r\n        },\r\n\r\n        /**\r\n         * Custom pre-content. Can be a simple string or an HTMLElement\r\n         */\r\n        getPreContent() {},\r\n\r\n        /**\r\n         * Custom post-content. Can be a simple string or an HTMLElement\r\n         */\r\n        getPostContent() {},\r\n\r\n        /**\r\n         * Get all the content for the custom code\r\n         * @return {HTMLElement}\r\n         */\r\n        getContent() {\r\n            const { editor } = this;\r\n            const content = document.createElement('div');\r\n            const pfx = editor.getConfig('stylePrefix');\r\n            content.className = `${pfx}attach-script`;\r\n            appendToContent(content, this.getPreContent());\r\n            const codeViewer = this.getCodeViewer();\r\n            codeViewer.refresh();\r\n            setTimeout(() => codeViewer.focus(), 0);\r\n            content.appendChild(codeViewer.getElement());\r\n            appendToContent(content, this.getPostContent());\r\n            appendToContent(content, this.getContentActions());\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Get the actions content. Can be a simple string or an HTMLElement\r\n         * @return {HTMLElement|String}\r\n         */\r\n        getContentActions() {\r\n            const { editor } = this;\r\n            const actions = document.createElement('div');\r\n            actions.id = \"actns\";\r\n            const btn = document.createElement('button');\r\n            const pfx = editor.getConfig('stylePrefix');\r\n            btn.innerHTML = opts.buttonLabel;\r\n            btn.className = `${pfx}btn-prim ${pfx}btn-save__inject-logic`;\r\n            btn.onclick = () => this.handleSave();\r\n\r\n            const runLogic = document.createElement('div');\r\n            runLogic.id = \"logic-toolbar\";\r\n            runLogic.className = \"fa fa-bug\";\r\n            runLogic.style = \"margin:5px;padding:10px;background:rgba(0,0,0,0.2);border-radius:3px;border:1px solid rgba(0,0,0,0.2);cursor:pointer\";\r\n            runLogic.onclick = () => this.runCode();\r\n\r\n            actions.appendChild(runLogic);\r\n            actions.appendChild(btn);\r\n\r\n            return actions;\r\n        },\r\n\r\n        /**\r\n         * Handle the main save task\r\n         */\r\n        handleSave() {\r\n            const { editor, target } = this;\r\n            const code = this.getCodeViewer().getContent();\r\n            target.set('script', code);\r\n            editor.Modal.close();\r\n        },\r\n\r\n        /**\r\n         * Return the code viewer instance\r\n         * @return {CodeViewer}\r\n         */\r\n        getCodeViewer() {\r\n            const { editor } = this;\r\n\r\n            if (!this.codeViewer) {\r\n                this.codeViewer = editor.CodeManager.createViewer({\r\n                    codeName: 'javascript',\r\n                    theme: 'hopscotch',\r\n                    readOnly: 0,\r\n                    autoBeautify: 1,\r\n                    ...codeViewOptions,\r\n                });\r\n            }\r\n\r\n            return this.codeViewer;\r\n        },\r\n\r\n        /**\r\n         * Evaluate code syntax\r\n         */\r\n        runCode() {\r\n            //console.log(\"run\")\r\n            try {\r\n                const code = this.getCodeViewer().getContent();\r\n                Function('\"use strict\";' + code)(); // final code\r\n                onRun && onRun();\r\n            } catch (err) {\r\n                console.log(\"error\", err);\r\n                onError && onError(err);\r\n            }\r\n        },\r\n\r\n        ...commandAttachScript,\r\n    });\r\n}","import commands from \"./commands\";\r\n\r\nwindow.grapesjs.plugins.add(\"grapesjs-script-editor\", (editor, opts = {}) => {\r\n    const options = {\r\n        ...{\r\n            // Starter code\r\n            starter: \"let el = this\",\r\n\r\n            toolbarIcon: '<i class=\"fa fa-file-code-o\"></i>',\r\n\r\n            // Component types to allow script editing\r\n            // Avoid components with predefined scripts\r\n            scriptTypesSupport: [\r\n                \"default\",\r\n                \"wrapper\",\r\n                \"text\",\r\n                \"textnode\",\r\n                \"image\",\r\n                \"video\",\r\n                \"svg\",\r\n            ],\r\n\r\n            // Object to extend the default component's toolbar button for the code, eg. `{ label: '</>', attributes: { title: 'Open custom code' } }`\r\n            // Pass a falsy value to avoid adding the button\r\n            toolbarBtnCustomScript: {},\r\n\r\n            // On run success\r\n            onRun: () => console.log(\"valid syntax\"),\r\n\r\n            // Logic when there is an error on run\r\n            onError: (err) => console.log(\"error\", err),\r\n\r\n            // Title for the custom code modal\r\n            modalTitle: \"Script\",\r\n\r\n            // Textarea label\r\n            codeLabel: \"JS\",\r\n\r\n            // Additional options for the code viewer, eg. `{ theme: 'hopscotch', readOnly: 0 }`\r\n            codeViewOptions: {},\r\n\r\n            // Label for the default save button\r\n            buttonLabel: \"Save\",\r\n\r\n            // Object to extend the default inject logic command.\r\n            // Check the source to see all available methods\r\n            commandAttachScript: {},\r\n        },\r\n        ...opts,\r\n    };\r\n\r\n    // load commands\r\n    commands(editor, options);\r\n});\r\n"],"names":["cmdId","editor","opts","cm","Commands","md","Modal","domc","Components","modalTitle","codeViewOptions","commandAttachScript","toolbarIcon","onRun","onError","starter","scriptTypesSupport","content","appendToContent","target","HTMLElement","appendChild","insertAdjacentHTML","$","isString","split","isArray","includes","getTypes","map","c","id","forEach","type","typeOpt","getType","model","addType","initToolbar","prototype","apply","this","arguments","tb","get","tbExists","some","item","command","unshift","label","toolbarBtnCustomScript","set","add","run","sender","options","getSelected","showCustomCode","stop","close","title","getContent","code","getScriptString","open","getModel","once","stopCommand","getCodeViewer","setContent","getPreContent","getPostContent","document","createElement","pfx","getConfig","className","codeViewer","refresh","setTimeout","focus","getElement","getContentActions","actions","btn","innerHTML","buttonLabel","onclick","handleSave","runLogic","style","runCode","CodeManager","createViewer","codeName","theme","readOnly","autoBeautify","Function","err","console","log","window","grapesjs","plugins","codeLabel","commands"],"sourceRoot":""}